#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tad-backend:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//Mongo
const mongoose = require('mongoose');
const schema_usuarios = require('../schemas/schema_usuarios');
const usuarios = mongoose.model('Usuarios', schema_usuarios,'Usuarios');

const io = require('socket.io')(server, {
  cors: {origin : '*'}
});
var usuario = '';
io.on('connection', (socket) => {

  socket.on('usuario', async function (datos) {
    usuario=usuario+datos;
  });

  socket.on('agregar-usuario', async function (datos) {
    const fecha = new Date();
    const usuario = datos;
    try{
      const usuario_creado = new usuarios({
        imagen: usuario.imagen, 
        nombre: usuario.nombre, 
        clave: usuario.clave,
        correo: usuario.correo,
        celular: usuario.celular,
        fecha: fecha,
        dni_ruc: usuario.dni_ruc,
        tipo: usuario.tipo
      });
      await usuario_creado.save();
      io.emit('respuesta', 'Usuario agregado');
    }
    catch(error){
      io.emit('respuesta', error);
    };
    
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
